/*
    8-bit binary
    By: Daan
*/

import "../arithmetic.lc";

I := λx.x;
F := λt f.f;
T := λt f.t;

pair    := λx y f.f x y;                  // Creates a pairing of two elements

fst := λp.p T;
snd := λp.p F;

OR := λb1.λb2.b1 T b2;
AND := λb1.λb2.b1 b2 F;
NOT := λb.b F T;
XOR := λb1.λb2.b1 NOT I b2;
XNOR := λb1.λb2.b1 I NOT b2;

// Binary numbers

BITS := 8;

// FEED_N := λf.λx.f x x x -> n times
FEED_Nc := λn.λf.n (λh.λa.h a a) (λa.f);

EMPTYb := λ0.λ1.λf.f;
0b := λ0.λ1.λf.FEED_Nc BITS f 0;
1b := λ0.λ1.λf.FEED_Nc (pred BITS) f 0 1;

FOLD_Nc := λn.λf.n (λh.λx.λa.h (f x a)) I;

IS_ZEROb := λi.NOT (i F T (FOLD_Nc BITS OR F));
COUNTb := λi.i F T (FOLD_Nc BITS (λn b.b (succ n) n) 0);

REMOVE_HEAD_BIT := λi.λ0.λ1.λf.i 0 1 (λx.f);
ADD_BIT := λi b.λ0 1 f.i 0 1 (f (b 1 0));
GLUE_BITS := λi1 i2.λ0 1 f.i2 0 1 (i1 0 1 f);

FOLD2_Nc := λn.λf.n (λh.λx.λa.λb.h (f x a b)) I;
BINARY_CASCADE := (λfun.λf.λx.
                        λa7 a6 a5 a4 a3 a2 a1 a0.
                        λb7 b6 b5 b4 b3 b2 b1 b0.
                        fun f x
                        a0 b0 a1 b1 a2 b2 a3 b3 a4 b4 a5 b5 a6 b6 a7 b7
                        ) (FOLD2_Nc BITS);

BITWISE_ADD := λa.λb.λc.a XNOR XOR b c;
BITWISE_CARRY := λa.λb.λc.a OR AND b c;

// (binary number, carry) -> (binary number, carry)

// ((carry, binary number), bool, bool) -> (carry, binary number)
// carry == p T
// number == p F
BIN_ADD_STEP := λp.λa.λb.pair (BITWISE_CARRY (fst p) a b) (ADD_BIT (snd p) (BITWISE_ADD (fst p) a b));
BINARY_ADD := λi1 i2.(GLUE_BITS i1 i2) F T (BINARY_CASCADE BIN_ADD_STEP (pair F EMPTYb)) F;
BINARY_INVERT := λi.λ0.λ1.λf.i 1 0 f;
BINARY_SUB := λi1 i2.BINARY_ADD (BINARY_ADD i1 (BINARY_INVERT i2)) 1b;
BINARY_REV := λi.λ0 1 f.i 0 1 (λa7 a6 a5 a4 a3 a2 a1 a0.f a0 a1 a2 a3 a4 a5 a6 a7);

// (2^n, c)
STEP_FUN := λp b.pair (double (fst p)) (b (add (snd p) (fst p)) (snd p));
BINARY_TO_CHURCH := λi1.snd((BINARY_REV i1) F T (FOLD_Nc 8 STEP_FUN (pair 1 0)));
//BINARY_TO_CHURCH := FOLD_Nc 8 STEP_FUN (pair 1 0)

2b := BINARY_ADD 1b 1b;
3b := BINARY_ADD 2b 1b;
4b := BINARY_ADD 3b 1b;
5b := BINARY_ADD 4b 1b;
6b := BINARY_ADD 5b 1b;
7b := BINARY_ADD 6b 1b;
8b := BINARY_ADD 7b 1b;
9b := BINARY_ADD 8b 1b;
10b := BINARY_ADD 9b 1b;
11b := BINARY_ADD 10b 1b;
12b := BINARY_ADD 11b 1b;
13b := BINARY_ADD 12b 1b;
14b := BINARY_ADD 13b 1b;
15b := BINARY_ADD 14b 1b;
16b := BINARY_ADD 15b 1b;

print BINARY_TO_CHURCH 6b;

/*print 0b;
print 1b;
print 4b;
print 8b;
print 12b;
print 15b;
print 16b;

print BINARY_SUB 8b 2b;

print 255 (BINARY_ADD 1b) 0b;*/